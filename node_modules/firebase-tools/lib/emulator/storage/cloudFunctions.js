"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageCloudFunctions = void 0;
const registry_1 = require("../registry");
const types_1 = require("../types");
const emulatorLogger_1 = require("../emulatorLogger");
const metadata_1 = require("./metadata");
const apiv2_1 = require("../../apiv2");
class StorageCloudFunctions {
    constructor(projectId) {
        this.projectId = projectId;
        this.logger = emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE);
        this.multicastOrigin = "";
        this.multicastPath = "";
        this.enabled = false;
        const functionsEmulator = registry_1.EmulatorRegistry.get(types_1.Emulators.FUNCTIONS);
        if (functionsEmulator) {
            this.enabled = true;
            this.functionsEmulatorInfo = functionsEmulator.getInfo();
            this.multicastOrigin = `http://${registry_1.EmulatorRegistry.getInfoHostString(this.functionsEmulatorInfo)}`;
            this.multicastPath = `/functions/projects/${projectId}/trigger_multicast`;
        }
    }
    async dispatch(action, object) {
        if (!this.enabled)
            return;
        const multicastEventBody = this.createEventRequestBody(action, object);
        const c = new apiv2_1.Client({ urlPrefix: this.multicastOrigin, auth: false });
        let res;
        let err;
        try {
            res = await c.post(this.multicastPath, multicastEventBody);
        }
        catch (e) {
            err = e;
        }
        if (err || (res === null || res === void 0 ? void 0 : res.status) != 200) {
            this.logger.logLabeled("WARN", "functions", `Firebase Storage function was not triggered due to emulation error. Please file a bug.`);
        }
    }
    createEventRequestBody(action, objectMetadataPayload) {
        const timestamp = new Date();
        return JSON.stringify({
            eventId: `${timestamp.getTime()}`,
            timestamp: metadata_1.toSerializedDate(timestamp),
            eventType: `google.storage.object.${action}`,
            resource: {
                service: "storage.googleapis.com",
                name: `projects/_/buckets/${objectMetadataPayload.bucket}/objects/${objectMetadataPayload.name}`,
                type: "storage#object",
            },
            data: objectMetadataPayload,
        });
    }
}
exports.StorageCloudFunctions = StorageCloudFunctions;
