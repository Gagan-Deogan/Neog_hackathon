"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createApp = void 0;
const express = require("express");
const emulatorLogger_1 = require("../emulatorLogger");
const types_1 = require("../types");
const bodyParser = require("body-parser");
const gcloud_1 = require("./apis/gcloud");
const firebase_1 = require("./apis/firebase");
function createApp(defaultProjectId, emulator) {
    const { storageLayer } = emulator;
    const app = express();
    emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE).log("DEBUG", `Temp file directory for storage emulator: ${storageLayer.dirPath}`);
    app.use((req, res, next) => {
        res.set("Access-Control-Allow-Origin", "*");
        res.set("Access-Control-Allow-Headers", "*");
        res.set("Access-Control-Allow-Methods", "GET, HEAD, POST, PUT, DELETE, OPTIONS, PATCH");
        res.set("Access-Control-Expose-Headers", [
            "content-type",
            "x-firebase-storage-version",
            "x-goog-upload-url",
            "x-goog-upload-status",
            "x-goog-upload-command",
            "x-gupload-uploadid",
            "x-goog-upload-header-content-length",
            "x-goog-upload-header-content-type",
            "x-goog-upload-protocol",
            "x-goog-upload-status",
            "x-goog-upload-chunk-granularity",
            "x-goog-upload-control-url",
        ].join(","));
        if (req.method === "OPTIONS") {
            res.end();
        }
        else {
            next();
        }
    });
    app.use(bodyParser.raw({ limit: "130mb", type: "application/x-www-form-urlencoded" }));
    app.use(bodyParser.raw({ limit: "130mb", type: "multipart/related" }));
    app.use(express.json({
        type: ["application/json"],
    }));
    app.post("/internal/reset", (req, res) => {
        storageLayer.reset();
        res.sendStatus(200);
    });
    app.use("/v0", firebase_1.createFirebaseEndpoints(emulator));
    app.use("/", gcloud_1.createCloudEndpoints(emulator));
    app.all("**", (req, res) => {
        if (process.env.STORAGE_EMULATOR_DEBUG) {
            console.table(req.headers);
            console.log(req.method, req.url);
            res.json("endpoint not implemented");
        }
        else {
            res.sendStatus(404).json("endpoint not implemented");
        }
    });
    return Promise.resolve(app);
}
exports.createApp = createApp;
