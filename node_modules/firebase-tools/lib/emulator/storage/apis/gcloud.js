"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCloudEndpoints = void 0;
const express_1 = require("express");
const emulatorLogger_1 = require("../../emulatorLogger");
const types_1 = require("../../types");
const metadata_1 = require("../metadata");
const registry_1 = require("../../registry");
function createCloudEndpoints(emulator) {
    const gcloudStorageAPI = express_1.Router();
    const { storageLayer } = emulator;
    gcloudStorageAPI.get("/b", (req, res) => {
        res.json({
            kind: "storage#buckets",
            items: storageLayer.listBuckets(),
        });
    });
    gcloudStorageAPI.use(/.*\/b\/(.+?)\/.*/, (req, res, next) => {
        storageLayer.createBucket(req.params[0]);
        next();
    });
    gcloudStorageAPI.get("/b/:bucketId/o/:objectId", (req, res) => {
        const md = storageLayer.getMetadata(req.params.bucketId, req.params.objectId);
        if (!md) {
            res.sendStatus(404);
            return;
        }
        emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE).log("WARN", `Returning metadata: ${JSON.stringify(md)}`);
        const outgoingMd = new metadata_1.CloudStorageObjectMetadata(md);
        res.json(outgoingMd).status(200).send();
        return;
    });
    gcloudStorageAPI.patch("/b/:bucketId/o/:objectId", (req, res) => {
        const md = storageLayer.getMetadata(req.params.bucketId, req.params.objectId);
        if (!md) {
            res.sendStatus(404);
            return;
        }
        md.update(req.body);
        const outgoingMetadata = new metadata_1.CloudStorageObjectMetadata(md);
        emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE).log("WARN", `Returning metadata: ${JSON.stringify(outgoingMetadata)}`);
        res.json(outgoingMetadata).status(200).send();
        return;
    });
    gcloudStorageAPI.get("/b/:bucketId/o", (req, res) => {
        let maxRes = undefined;
        if (req.query.maxResults) {
            maxRes = +req.query.maxResults.toString();
        }
        const delimiter = req.query.delimiter ? req.query.delimiter.toString() : "/";
        const pageToken = req.query.pageToken ? req.query.pageToken.toString() : undefined;
        const prefix = req.query.prefix ? req.query.prefix.toString() : "";
        emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE).log("WARN", `Received list objects request for bucket: ${req.params.bucketId}, with prefix: ${prefix} and delimiter: ${delimiter} and pageToken: ${pageToken} and maxResults: ${req.params.maxResults}`);
        const listResult = storageLayer.listItems(req.params.bucketId, prefix, delimiter, pageToken, maxRes);
        res.json(listResult);
    });
    gcloudStorageAPI.delete("/b/:bucketId/o/:object", (req, res) => {
        const decodedObjectId = decodeURIComponent(req.params.objectId);
        const md = storageLayer.getMetadata(req.params.bucketId, decodedObjectId);
        if (!md) {
            res.sendStatus(404);
            return;
        }
        storageLayer.deleteFile(req.params.bucketId, req.params.objectId);
        res.status(200).send();
    });
    gcloudStorageAPI.put("/upload/storage/v1/b/:bucketId/o", async (req, res) => {
        if (!req.query.upload_id) {
            emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE).log("WARN", `No upload id passed as query parameter!`);
            res.sendStatus(400);
            return;
        }
        const uploadId = req.query.upload_id.toString();
        const bufs = [];
        req.on("data", (data) => {
            bufs.push(data);
        });
        await new Promise((resolve) => {
            req.on("end", () => {
                req.body = Buffer.concat(bufs);
                resolve();
            });
        });
        let upload = storageLayer.uploadBytes(uploadId, req.body);
        if (!upload) {
            res.sendStatus(400);
            return;
        }
        const finalizedUpload = storageLayer.finalizeUpload(uploadId);
        if (!finalizedUpload) {
            emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE).log("WARN", `No upload found for finalizeUpload:${uploadId}`);
            res.sendStatus(400);
            return;
        }
        upload = finalizedUpload.upload;
        res.status(200).json(new metadata_1.CloudStorageObjectMetadata(finalizedUpload.file.metadata)).send();
    });
    gcloudStorageAPI.post("/upload/storage/v1/b/:bucketId/o", (req, res) => {
        if (!req.query.name) {
            res.sendStatus(400);
            return;
        }
        let name = req.query.name.toString();
        if (name.startsWith("/")) {
            name = name.slice(1);
        }
        const contentType = req.header("content-type") || req.header("x-upload-content-type");
        if (!contentType) {
            emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE).log("WARN", `Missing content type`);
            res.sendStatus(400);
            return;
        }
        if (req.query.uploadType == "resumable") {
            const upload = storageLayer.startUpload(req.params.bucketId, name, contentType, req.body);
            const emulatorInfo = registry_1.EmulatorRegistry.getInfo(types_1.Emulators.STORAGE);
            if (emulatorInfo == undefined) {
                emulatorLogger_1.EmulatorLogger.forEmulator(types_1.Emulators.STORAGE).log("WARN", `Can't generate upload URL, no running storage emulator?`);
                res.sendStatus(500);
                return;
            }
            const { host, port } = emulatorInfo;
            const uploadUrl = `http://${host}:${port}/upload/storage/v1/b/${upload.bucketId}/o?name=${upload.fileLocation}&uploadType=resumable&upload_id=${upload.uploadId}`;
            res.header("location", uploadUrl).status(200).send();
            return;
        }
        if (!contentType.startsWith("multipart/related")) {
            res.sendStatus(400);
            return;
        }
        const boundary = `--${contentType.split("boundary=")[1]}`;
        const bodyString = req.body.toString();
        const bodyStringParts = bodyString.split(boundary).filter((v) => v);
        const metadataString = bodyStringParts[0].split(/\r?\n/)[3];
        const blobParts = bodyStringParts[1].split(/\r?\n/);
        const blobContentTypeString = blobParts[1];
        if (!blobContentTypeString || !blobContentTypeString.startsWith("Content-Type: ")) {
            res.sendStatus(400);
            return;
        }
        const blobContentType = blobContentTypeString.slice("Content-Type: ".length);
        const bodyBuffer = req.body;
        const metadataSegment = `${boundary}${bodyString.split(boundary)[1]}`;
        const dataSegment = `${boundary}${bodyString.split(boundary).slice(2)[0]}`;
        const dataSegmentHeader = (dataSegment.match(/.+Content-Type:.+?\r?\n\r?\n/s) || [])[0];
        if (!dataSegmentHeader) {
            res.sendStatus(400);
            return;
        }
        const bufferOffset = metadataSegment.length + dataSegmentHeader.length;
        const blobBytes = Buffer.from(bodyBuffer.slice(bufferOffset, -`\r\n${boundary}--`.length));
        const metadata = storageLayer.oneShotUpload(req.params.bucketId, name, blobContentType, JSON.parse(metadataString), blobBytes);
        if (!metadata) {
            res.sendStatus(400);
            return;
        }
        res.status(200).json(new metadata_1.CloudStorageObjectMetadata(metadata)).send();
        return;
    });
    return gcloudStorageAPI;
}
exports.createCloudEndpoints = createCloudEndpoints;
