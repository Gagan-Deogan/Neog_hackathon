"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renameIfPresent = exports.copyIfPresent = exports.assertOneOf = exports.durationFromSeconds = exports.secondsFromDuration = void 0;
const error_1 = require("../error");
function secondsFromDuration(d) {
    return +d.slice(0, d.length - 1);
}
exports.secondsFromDuration = secondsFromDuration;
function durationFromSeconds(s) {
    return `${s}s`;
}
exports.durationFromSeconds = durationFromSeconds;
function assertOneOf(typename, obj, oneof, ...fields) {
    const defined = [];
    for (const key of fields) {
        const value = obj[key];
        if (typeof value !== "undefined" && value != null) {
            defined.push(key);
        }
    }
    if (defined.length > 1) {
        throw new error_1.FirebaseError(`Invalid ${typename} definition. ${oneof} can only have one field defined, but found ${defined.join(",")}`);
    }
}
exports.assertOneOf = assertOneOf;
function copyIfPresent(dest, src, field, converter = (from) => {
    return from;
}) {
    if (typeof src[field] === "undefined") {
        return;
    }
    dest[field] = converter(src[field]);
}
exports.copyIfPresent = copyIfPresent;
function renameIfPresent(dest, src, destField, srcField, converter = (from) => {
    return from;
}) {
    if (typeof src[srcField] === "undefined") {
        return;
    }
    dest[destField] = converter(src[srcField]);
}
exports.renameIfPresent = renameIfPresent;
